# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ChunkInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'head': 'int',
        'dep': 'str',
        'chunk_head': 'int',
        'chunk_funkc': 'int',
        'links': 'list[LinkInfo]',
        'predicate': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'head': 'head',
        'dep': 'dep',
        'chunk_head': 'chunk_head',
        'chunk_funkc': 'chunk_funkc',
        'links': 'links',
        'predicate': 'predicate'
    }

    def __init__(self, id=None, head=None, dep=None, chunk_head=None, chunk_funkc=None, links=None, predicate=None):  # noqa: E501
        """ChunkInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._head = None
        self._dep = None
        self._chunk_head = None
        self._chunk_funkc = None
        self._links = None
        self._predicate = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if head is not None:
            self.head = head
        if dep is not None:
            self.dep = dep
        if chunk_head is not None:
            self.chunk_head = chunk_head
        if chunk_funkc is not None:
            self.chunk_funkc = chunk_funkc
        if links is not None:
            self.links = links
        if predicate is not None:
            self.predicate = predicate

    @property
    def id(self):
        """Gets the id of this ChunkInfo.  # noqa: E501


        :return: The id of this ChunkInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChunkInfo.


        :param id: The id of this ChunkInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def head(self):
        """Gets the head of this ChunkInfo.  # noqa: E501


        :return: The head of this ChunkInfo.  # noqa: E501
        :rtype: int
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this ChunkInfo.


        :param head: The head of this ChunkInfo.  # noqa: E501
        :type: int
        """

        self._head = head

    @property
    def dep(self):
        """Gets the dep of this ChunkInfo.  # noqa: E501


        :return: The dep of this ChunkInfo.  # noqa: E501
        :rtype: str
        """
        return self._dep

    @dep.setter
    def dep(self, dep):
        """Sets the dep of this ChunkInfo.


        :param dep: The dep of this ChunkInfo.  # noqa: E501
        :type: str
        """

        self._dep = dep

    @property
    def chunk_head(self):
        """Gets the chunk_head of this ChunkInfo.  # noqa: E501


        :return: The chunk_head of this ChunkInfo.  # noqa: E501
        :rtype: int
        """
        return self._chunk_head

    @chunk_head.setter
    def chunk_head(self, chunk_head):
        """Sets the chunk_head of this ChunkInfo.


        :param chunk_head: The chunk_head of this ChunkInfo.  # noqa: E501
        :type: int
        """

        self._chunk_head = chunk_head

    @property
    def chunk_funkc(self):
        """Gets the chunk_funkc of this ChunkInfo.  # noqa: E501


        :return: The chunk_funkc of this ChunkInfo.  # noqa: E501
        :rtype: int
        """
        return self._chunk_funkc

    @chunk_funkc.setter
    def chunk_funkc(self, chunk_funkc):
        """Sets the chunk_funkc of this ChunkInfo.


        :param chunk_funkc: The chunk_funkc of this ChunkInfo.  # noqa: E501
        :type: int
        """

        self._chunk_funkc = chunk_funkc

    @property
    def links(self):
        """Gets the links of this ChunkInfo.  # noqa: E501


        :return: The links of this ChunkInfo.  # noqa: E501
        :rtype: list[LinkInfo]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChunkInfo.


        :param links: The links of this ChunkInfo.  # noqa: E501
        :type: list[LinkInfo]
        """

        self._links = links

    @property
    def predicate(self):
        """Gets the predicate of this ChunkInfo.  # noqa: E501


        :return: The predicate of this ChunkInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this ChunkInfo.


        :param predicate: The predicate of this ChunkInfo.  # noqa: E501
        :type: list[str]
        """

        self._predicate = predicate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChunkInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChunkInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
