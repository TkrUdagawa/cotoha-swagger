# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Referents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'referent_id': 'int',
        'sentence_id': 'int',
        'token_id_from': 'int',
        'token_id_to': 'int'
    }

    attribute_map = {
        'referent_id': 'referent_id',
        'sentence_id': 'sentence_id',
        'token_id_from': 'token_id_from',
        'token_id_to': 'token_id_to'
    }

    def __init__(self, referent_id=None, sentence_id=None, token_id_from=None, token_id_to=None):  # noqa: E501
        """Referents - a model defined in Swagger"""  # noqa: E501
        self._referent_id = None
        self._sentence_id = None
        self._token_id_from = None
        self._token_id_to = None
        self.discriminator = None
        if referent_id is not None:
            self.referent_id = referent_id
        if sentence_id is not None:
            self.sentence_id = sentence_id
        if token_id_from is not None:
            self.token_id_from = token_id_from
        if token_id_to is not None:
            self.token_id_to = token_id_to

    @property
    def referent_id(self):
        """Gets the referent_id of this Referents.  # noqa: E501


        :return: The referent_id of this Referents.  # noqa: E501
        :rtype: int
        """
        return self._referent_id

    @referent_id.setter
    def referent_id(self, referent_id):
        """Sets the referent_id of this Referents.


        :param referent_id: The referent_id of this Referents.  # noqa: E501
        :type: int
        """

        self._referent_id = referent_id

    @property
    def sentence_id(self):
        """Gets the sentence_id of this Referents.  # noqa: E501


        :return: The sentence_id of this Referents.  # noqa: E501
        :rtype: int
        """
        return self._sentence_id

    @sentence_id.setter
    def sentence_id(self, sentence_id):
        """Sets the sentence_id of this Referents.


        :param sentence_id: The sentence_id of this Referents.  # noqa: E501
        :type: int
        """

        self._sentence_id = sentence_id

    @property
    def token_id_from(self):
        """Gets the token_id_from of this Referents.  # noqa: E501


        :return: The token_id_from of this Referents.  # noqa: E501
        :rtype: int
        """
        return self._token_id_from

    @token_id_from.setter
    def token_id_from(self, token_id_from):
        """Sets the token_id_from of this Referents.


        :param token_id_from: The token_id_from of this Referents.  # noqa: E501
        :type: int
        """

        self._token_id_from = token_id_from

    @property
    def token_id_to(self):
        """Gets the token_id_to of this Referents.  # noqa: E501


        :return: The token_id_to of this Referents.  # noqa: E501
        :rtype: int
        """
        return self._token_id_to

    @token_id_to.setter
    def token_id_to(self, token_id_to):
        """Sets the token_id_to of this Referents.


        :param token_id_to: The token_id_to of this Referents.  # noqa: E501
        :type: int
        """

        self._token_id_to = token_id_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Referents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Referents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
