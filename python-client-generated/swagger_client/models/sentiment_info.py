# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SentimentInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sentiment': 'str',
        'score': 'float',
        'emotional_pharase': 'list[str]'
    }

    attribute_map = {
        'sentiment': 'sentiment',
        'score': 'score',
        'emotional_pharase': 'emotional_pharase'
    }

    def __init__(self, sentiment=None, score=None, emotional_pharase=None):  # noqa: E501
        """SentimentInfo - a model defined in Swagger"""  # noqa: E501
        self._sentiment = None
        self._score = None
        self._emotional_pharase = None
        self.discriminator = None
        if sentiment is not None:
            self.sentiment = sentiment
        if score is not None:
            self.score = score
        if emotional_pharase is not None:
            self.emotional_pharase = emotional_pharase

    @property
    def sentiment(self):
        """Gets the sentiment of this SentimentInfo.  # noqa: E501


        :return: The sentiment of this SentimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this SentimentInfo.


        :param sentiment: The sentiment of this SentimentInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Positive", "Negative", "Neutral", "Positive/Negative"]  # noqa: E501
        if sentiment not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment` ({0}), must be one of {1}"  # noqa: E501
                .format(sentiment, allowed_values)
            )

        self._sentiment = sentiment

    @property
    def score(self):
        """Gets the score of this SentimentInfo.  # noqa: E501


        :return: The score of this SentimentInfo.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SentimentInfo.


        :param score: The score of this SentimentInfo.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def emotional_pharase(self):
        """Gets the emotional_pharase of this SentimentInfo.  # noqa: E501


        :return: The emotional_pharase of this SentimentInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._emotional_pharase

    @emotional_pharase.setter
    def emotional_pharase(self, emotional_pharase):
        """Sets the emotional_pharase of this SentimentInfo.


        :param emotional_pharase: The emotional_pharase of this SentimentInfo.  # noqa: E501
        :type: list[str]
        """

        self._emotional_pharase = emotional_pharase

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SentimentInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SentimentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
