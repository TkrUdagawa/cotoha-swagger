# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'begin_pos': 'int',
        'end_pos': 'int',
        'form': 'str',
        'std_form': 'str',
        '_class': 'str',
        'extended_class': 'str',
        'info': 'str',
        'source': 'str'
    }

    attribute_map = {
        'begin_pos': 'begin_pos',
        'end_pos': 'end_pos',
        'form': 'form',
        'std_form': 'std_form',
        '_class': 'class',
        'extended_class': 'extended_class',
        'info': 'info',
        'source': 'source'
    }

    def __init__(self, begin_pos=None, end_pos=None, form=None, std_form=None, _class=None, extended_class=None, info=None, source=None):  # noqa: E501
        """NeInfo - a model defined in Swagger"""  # noqa: E501
        self._begin_pos = None
        self._end_pos = None
        self._form = None
        self._std_form = None
        self.__class = None
        self._extended_class = None
        self._info = None
        self._source = None
        self.discriminator = None
        if begin_pos is not None:
            self.begin_pos = begin_pos
        if end_pos is not None:
            self.end_pos = end_pos
        if form is not None:
            self.form = form
        if std_form is not None:
            self.std_form = std_form
        if _class is not None:
            self._class = _class
        if extended_class is not None:
            self.extended_class = extended_class
        if info is not None:
            self.info = info
        if source is not None:
            self.source = source

    @property
    def begin_pos(self):
        """Gets the begin_pos of this NeInfo.  # noqa: E501


        :return: The begin_pos of this NeInfo.  # noqa: E501
        :rtype: int
        """
        return self._begin_pos

    @begin_pos.setter
    def begin_pos(self, begin_pos):
        """Sets the begin_pos of this NeInfo.


        :param begin_pos: The begin_pos of this NeInfo.  # noqa: E501
        :type: int
        """

        self._begin_pos = begin_pos

    @property
    def end_pos(self):
        """Gets the end_pos of this NeInfo.  # noqa: E501


        :return: The end_pos of this NeInfo.  # noqa: E501
        :rtype: int
        """
        return self._end_pos

    @end_pos.setter
    def end_pos(self, end_pos):
        """Sets the end_pos of this NeInfo.


        :param end_pos: The end_pos of this NeInfo.  # noqa: E501
        :type: int
        """

        self._end_pos = end_pos

    @property
    def form(self):
        """Gets the form of this NeInfo.  # noqa: E501


        :return: The form of this NeInfo.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this NeInfo.


        :param form: The form of this NeInfo.  # noqa: E501
        :type: str
        """

        self._form = form

    @property
    def std_form(self):
        """Gets the std_form of this NeInfo.  # noqa: E501


        :return: The std_form of this NeInfo.  # noqa: E501
        :rtype: str
        """
        return self._std_form

    @std_form.setter
    def std_form(self, std_form):
        """Sets the std_form of this NeInfo.


        :param std_form: The std_form of this NeInfo.  # noqa: E501
        :type: str
        """

        self._std_form = std_form

    @property
    def _class(self):
        """Gets the _class of this NeInfo.  # noqa: E501


        :return: The _class of this NeInfo.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this NeInfo.


        :param _class: The _class of this NeInfo.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def extended_class(self):
        """Gets the extended_class of this NeInfo.  # noqa: E501


        :return: The extended_class of this NeInfo.  # noqa: E501
        :rtype: str
        """
        return self._extended_class

    @extended_class.setter
    def extended_class(self, extended_class):
        """Sets the extended_class of this NeInfo.


        :param extended_class: The extended_class of this NeInfo.  # noqa: E501
        :type: str
        """

        self._extended_class = extended_class

    @property
    def info(self):
        """Gets the info of this NeInfo.  # noqa: E501


        :return: The info of this NeInfo.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this NeInfo.


        :param info: The info of this NeInfo.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def source(self):
        """Gets the source of this NeInfo.  # noqa: E501


        :return: The source of this NeInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this NeInfo.


        :param source: The source of this NeInfo.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
