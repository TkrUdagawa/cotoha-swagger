# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AuthResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'token_type': 'str',
        'expieres_in': 'int',
        'scope': 'str',
        'issued_at': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'token_type': 'token_type',
        'expieres_in': 'expieres_in',
        'scope': 'scope',
        'issued_at': 'issued_at'
    }

    def __init__(self, access_token=None, token_type=None, expieres_in=None, scope=None, issued_at=None):  # noqa: E501
        """AuthResult - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._token_type = None
        self._expieres_in = None
        self._scope = None
        self._issued_at = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if token_type is not None:
            self.token_type = token_type
        if expieres_in is not None:
            self.expieres_in = expieres_in
        if scope is not None:
            self.scope = scope
        if issued_at is not None:
            self.issued_at = issued_at

    @property
    def access_token(self):
        """Gets the access_token of this AuthResult.  # noqa: E501

        access token  # noqa: E501

        :return: The access_token of this AuthResult.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AuthResult.

        access token  # noqa: E501

        :param access_token: The access_token of this AuthResult.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def token_type(self):
        """Gets the token_type of this AuthResult.  # noqa: E501

        bearer  # noqa: E501

        :return: The token_type of this AuthResult.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AuthResult.

        bearer  # noqa: E501

        :param token_type: The token_type of this AuthResult.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    @property
    def expieres_in(self):
        """Gets the expieres_in of this AuthResult.  # noqa: E501

        残り有効期限(秒)  # noqa: E501

        :return: The expieres_in of this AuthResult.  # noqa: E501
        :rtype: int
        """
        return self._expieres_in

    @expieres_in.setter
    def expieres_in(self, expieres_in):
        """Sets the expieres_in of this AuthResult.

        残り有効期限(秒)  # noqa: E501

        :param expieres_in: The expieres_in of this AuthResult.  # noqa: E501
        :type: int
        """

        self._expieres_in = expieres_in

    @property
    def scope(self):
        """Gets the scope of this AuthResult.  # noqa: E501


        :return: The scope of this AuthResult.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AuthResult.


        :param scope: The scope of this AuthResult.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def issued_at(self):
        """Gets the issued_at of this AuthResult.  # noqa: E501


        :return: The issued_at of this AuthResult.  # noqa: E501
        :rtype: str
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this AuthResult.


        :param issued_at: The issued_at of this AuthResult.  # noqa: E501
        :type: str
        """

        self._issued_at = issued_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
