# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserAttributeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'str',
        'civilstatus': 'str',
        'earnings': 'str',
        'gender': 'str',
        'habit': 'list[str]',
        'hobby': 'list[str]',
        'kind_of_bussiness': 'str',
        'kind_of_occupation': 'str',
        'location': 'str',
        'moving': 'list[str]',
        'occupation': 'str',
        'position': 'str'
    }

    attribute_map = {
        'age': 'age',
        'civilstatus': 'civilstatus',
        'earnings': 'earnings',
        'gender': 'gender',
        'habit': 'habit',
        'hobby': 'hobby',
        'kind_of_bussiness': 'kind_of_bussiness',
        'kind_of_occupation': 'kind_of_occupation',
        'location': 'location',
        'moving': 'moving',
        'occupation': 'occupation',
        'position': 'position'
    }

    def __init__(self, age=None, civilstatus=None, earnings=None, gender=None, habit=None, hobby=None, kind_of_bussiness=None, kind_of_occupation=None, location=None, moving=None, occupation=None, position=None):  # noqa: E501
        """UserAttributeInfo - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._civilstatus = None
        self._earnings = None
        self._gender = None
        self._habit = None
        self._hobby = None
        self._kind_of_bussiness = None
        self._kind_of_occupation = None
        self._location = None
        self._moving = None
        self._occupation = None
        self._position = None
        self.discriminator = None
        if age is not None:
            self.age = age
        if civilstatus is not None:
            self.civilstatus = civilstatus
        if earnings is not None:
            self.earnings = earnings
        if gender is not None:
            self.gender = gender
        if habit is not None:
            self.habit = habit
        if hobby is not None:
            self.hobby = hobby
        if kind_of_bussiness is not None:
            self.kind_of_bussiness = kind_of_bussiness
        if kind_of_occupation is not None:
            self.kind_of_occupation = kind_of_occupation
        if location is not None:
            self.location = location
        if moving is not None:
            self.moving = moving
        if occupation is not None:
            self.occupation = occupation
        if position is not None:
            self.position = position

    @property
    def age(self):
        """Gets the age of this UserAttributeInfo.  # noqa: E501


        :return: The age of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this UserAttributeInfo.


        :param age: The age of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._age = age

    @property
    def civilstatus(self):
        """Gets the civilstatus of this UserAttributeInfo.  # noqa: E501


        :return: The civilstatus of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._civilstatus

    @civilstatus.setter
    def civilstatus(self, civilstatus):
        """Sets the civilstatus of this UserAttributeInfo.


        :param civilstatus: The civilstatus of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._civilstatus = civilstatus

    @property
    def earnings(self):
        """Gets the earnings of this UserAttributeInfo.  # noqa: E501


        :return: The earnings of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._earnings

    @earnings.setter
    def earnings(self, earnings):
        """Sets the earnings of this UserAttributeInfo.


        :param earnings: The earnings of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._earnings = earnings

    @property
    def gender(self):
        """Gets the gender of this UserAttributeInfo.  # noqa: E501


        :return: The gender of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserAttributeInfo.


        :param gender: The gender of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def habit(self):
        """Gets the habit of this UserAttributeInfo.  # noqa: E501


        :return: The habit of this UserAttributeInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._habit

    @habit.setter
    def habit(self, habit):
        """Sets the habit of this UserAttributeInfo.


        :param habit: The habit of this UserAttributeInfo.  # noqa: E501
        :type: list[str]
        """

        self._habit = habit

    @property
    def hobby(self):
        """Gets the hobby of this UserAttributeInfo.  # noqa: E501


        :return: The hobby of this UserAttributeInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._hobby

    @hobby.setter
    def hobby(self, hobby):
        """Sets the hobby of this UserAttributeInfo.


        :param hobby: The hobby of this UserAttributeInfo.  # noqa: E501
        :type: list[str]
        """

        self._hobby = hobby

    @property
    def kind_of_bussiness(self):
        """Gets the kind_of_bussiness of this UserAttributeInfo.  # noqa: E501


        :return: The kind_of_bussiness of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._kind_of_bussiness

    @kind_of_bussiness.setter
    def kind_of_bussiness(self, kind_of_bussiness):
        """Sets the kind_of_bussiness of this UserAttributeInfo.


        :param kind_of_bussiness: The kind_of_bussiness of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._kind_of_bussiness = kind_of_bussiness

    @property
    def kind_of_occupation(self):
        """Gets the kind_of_occupation of this UserAttributeInfo.  # noqa: E501


        :return: The kind_of_occupation of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._kind_of_occupation

    @kind_of_occupation.setter
    def kind_of_occupation(self, kind_of_occupation):
        """Sets the kind_of_occupation of this UserAttributeInfo.


        :param kind_of_occupation: The kind_of_occupation of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._kind_of_occupation = kind_of_occupation

    @property
    def location(self):
        """Gets the location of this UserAttributeInfo.  # noqa: E501


        :return: The location of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserAttributeInfo.


        :param location: The location of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def moving(self):
        """Gets the moving of this UserAttributeInfo.  # noqa: E501


        :return: The moving of this UserAttributeInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._moving

    @moving.setter
    def moving(self, moving):
        """Sets the moving of this UserAttributeInfo.


        :param moving: The moving of this UserAttributeInfo.  # noqa: E501
        :type: list[str]
        """

        self._moving = moving

    @property
    def occupation(self):
        """Gets the occupation of this UserAttributeInfo.  # noqa: E501


        :return: The occupation of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this UserAttributeInfo.


        :param occupation: The occupation of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._occupation = occupation

    @property
    def position(self):
        """Gets the position of this UserAttributeInfo.  # noqa: E501


        :return: The position of this UserAttributeInfo.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this UserAttributeInfo.


        :param position: The position of this UserAttributeInfo.  # noqa: E501
        :type: str
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAttributeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAttributeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
