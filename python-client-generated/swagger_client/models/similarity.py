# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Similarity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        's1': 'str',
        's2': 'str',
        'type': 'str'
    }

    attribute_map = {
        's1': 's1',
        's2': 's2',
        'type': 'type'
    }

    def __init__(self, s1=None, s2=None, type=None):  # noqa: E501
        """Similarity - a model defined in Swagger"""  # noqa: E501
        self._s1 = None
        self._s2 = None
        self._type = None
        self.discriminator = None
        if s1 is not None:
            self.s1 = s1
        if s2 is not None:
            self.s2 = s2
        if type is not None:
            self.type = type

    @property
    def s1(self):
        """Gets the s1 of this Similarity.  # noqa: E501


        :return: The s1 of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._s1

    @s1.setter
    def s1(self, s1):
        """Sets the s1 of this Similarity.


        :param s1: The s1 of this Similarity.  # noqa: E501
        :type: str
        """

        self._s1 = s1

    @property
    def s2(self):
        """Gets the s2 of this Similarity.  # noqa: E501


        :return: The s2 of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._s2

    @s2.setter
    def s2(self, s2):
        """Sets the s2 of this Similarity.


        :param s2: The s2 of this Similarity.  # noqa: E501
        :type: str
        """

        self._s2 = s2

    @property
    def type(self):
        """Gets the type of this Similarity.  # noqa: E501


        :return: The type of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Similarity.


        :param type: The type of this Similarity.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Similarity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Similarity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
