# coding: utf-8

"""
    COTOHA API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SentenceTypeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modality': 'str',
        'dialog_act': 'list[str]'
    }

    attribute_map = {
        'modality': 'modality',
        'dialog_act': 'dialog_act'
    }

    def __init__(self, modality=None, dialog_act=None):  # noqa: E501
        """SentenceTypeInfo - a model defined in Swagger"""  # noqa: E501
        self._modality = None
        self._dialog_act = None
        self.discriminator = None
        if modality is not None:
            self.modality = modality
        if dialog_act is not None:
            self.dialog_act = dialog_act

    @property
    def modality(self):
        """Gets the modality of this SentenceTypeInfo.  # noqa: E501


        :return: The modality of this SentenceTypeInfo.  # noqa: E501
        :rtype: str
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this SentenceTypeInfo.


        :param modality: The modality of this SentenceTypeInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["declarative", "interrogative", "imperative"]  # noqa: E501
        if modality not in allowed_values:
            raise ValueError(
                "Invalid value for `modality` ({0}), must be one of {1}"  # noqa: E501
                .format(modality, allowed_values)
            )

        self._modality = modality

    @property
    def dialog_act(self):
        """Gets the dialog_act of this SentenceTypeInfo.  # noqa: E501


        :return: The dialog_act of this SentenceTypeInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._dialog_act

    @dialog_act.setter
    def dialog_act(self, dialog_act):
        """Sets the dialog_act of this SentenceTypeInfo.


        :param dialog_act: The dialog_act of this SentenceTypeInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["greeting", "information-providing", "feedback", "information-seeking", "agreement", "feedbackElicitation", "commissive", "acceptOffer", "selfCorrection", "thanking", "apology", "stalling", "directive", "goodbye", "declineOffer", "turnAssign", "pausing", "acceptApology", "acceptThanking"]  # noqa: E501
        if not set(dialog_act).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dialog_act` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(dialog_act) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._dialog_act = dialog_act

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SentenceTypeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SentenceTypeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
